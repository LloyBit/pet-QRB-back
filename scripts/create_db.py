"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)"""
import sys
from pathlib import Path
from sqlalchemy import create_engine, text
from sqlalchemy.exc import ProgrammingError

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from app.config import settings

def create_database():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        print(f"üîÑ Creating database '{settings.db_name}' if not exists...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º admin URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        admin_engine = create_engine(settings.admin_db_url, isolation_level="AUTOCOMMIT")
        
        with admin_engine.connect() as conn:
            try:
                conn.execute(text(f'CREATE DATABASE "{settings.db_name}"'))
                print(f"‚úÖ Database '{settings.db_name}' created successfully!")
            except ProgrammingError as e:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ PostgreSQL (42P04 = duplicate database)
                if hasattr(e.orig, 'pgcode') and e.orig.pgcode == '42P04':
                    print(f"‚ÑπÔ∏è Database '{settings.db_name}' already exists - skipping creation")
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ PostgreSQL, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                    raise e
            except Exception as e:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                error_msg = str(e).lower()
                if any(phrase in error_msg for phrase in ["already exists", "duplicate", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"]):
                    print(f"‚ÑπÔ∏è Database '{settings.db_name}' already exists - skipping creation")
                else:
                    raise e
        
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to create database: {e}")
        return False

if __name__ == "__main__":
    success = create_database()
    sys.exit(0 if success else 1)
