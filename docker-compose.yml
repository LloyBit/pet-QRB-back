services:
  app:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - KAFKA_URL=kafka:9092
      - DB_URL=postgresql://user:user_password@postgres:5432/postgres
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user_password
      - POSTGRES_DB=postgres
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - qrb-network

  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - qrb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ${POSTGRES_DB}"] # явное указание т.к. нет системного пользователя root
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - qrb-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    env_file:
      - .env
    environment:
      KAFKA_KRAFT_MODE: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_BROKER_ID: 1
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "INFO"
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - qrb-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  qrb-network:
    external: true

volumes:
  postgres_data:
  redis_data:
  kafka_data: