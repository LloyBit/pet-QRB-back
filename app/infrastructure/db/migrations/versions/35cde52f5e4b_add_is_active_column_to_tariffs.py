"""Add is_active column to tariffs

Revision ID: 35cde52f5e4b
Revises: 
Create Date: 2025-09-06 07:33:00.180668

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '35cde52f5e4b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_table('tasks')
    op.create_unique_constraint(None, 'tariffs', ['name'])
    op.add_column('transactions', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('transactions', sa.Column('expired_at', sa.DateTime(), nullable=True))
    op.alter_column('transactions', 'payment_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.create_foreign_key(None, 'transactions', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key(None, 'transactions', 'tariffs', ['tariff_id'], ['tariff_id'])
    op.drop_column('transactions', 'payment_state')
    op.add_column('users', sa.Column('tariff_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('tariff_expires_at', sa.DateTime(), nullable=True))
    op.create_foreign_key(None, 'users', 'tariffs', ['tariff_id'], ['tariff_id'])
    op.drop_column('users', 'tariff')
    op.drop_column('users', 'payment_state')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('payment_state', postgresql.ENUM('NOT_PAID', 'IN_PROCESS', 'PAID', name='paymentstate'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('tariff', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_column('users', 'tariff_expires_at')
    op.drop_column('users', 'tariff_id')
    op.add_column('transactions', sa.Column('payment_state', postgresql.ENUM('NOT_PAID', 'IN_PROCESS', 'PAID', name='paymentstate'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.alter_column('transactions', 'payment_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('transactions', 'expired_at')
    op.drop_column('transactions', 'created_at')
    op.drop_constraint(None, 'tariffs', type_='unique')
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('created', 'in_progress', 'done', name='status'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    # ### end Alembic commands ###
